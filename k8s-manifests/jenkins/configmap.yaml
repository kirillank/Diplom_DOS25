apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-jcasc
  namespace: jenkins
data:
  jcasc.yaml: |
    jenkins:
      systemMessage: "Автоматически настроен через JCasC"
      numExecutors: 2
      securityRealm:
        local:
          allowsSignup: false
          users:
            - id: admin
              password: ${JENKINS_ADMIN_PASSWORD:-admin}
      authorizationStrategy:
        loggedInUsersCanDoAnything:
          allowAnonymousRead: false
      clouds:
        - kubernetes:
            name: "kubernetes"
            namespace: jenkins
            serverUrl: https://kubernetes.default
            skipTlsVerify: true
            jenkinsUrl: http://jenkins.jenkins.svc.cluster.local
            templates:
              - name: kaniko
                containers:
                  - name: kaniko
                    image: gcr.io/kaniko-project/executor:latest
                    command:
                      - /busybox/cat
                    ttyEnabled: true
                    workingDir: /workspace
                volumes:
                  - secretVolume:
                      mountPath: /kaniko/.docker
                      secretName: dockerhub-cred

    tool:
      jdk:
        installations:
          - name: "jdk17"                
            home: "/opt/java/openjdk" 
            properties: []               

    unclassified:
      location:
        url: http://jenkins.local
        adminAddress: kirillank94@gmail.com

    credentials:
      system:
        domainCredentials:
          - credentials:
              - usernamePassword:
                  id: github-credentials
                  scope: GLOBAL
                  username: ${GITHUB_USERNAME}
                  password: ${GITHUB_TOKEN}
              - string:
                  id: telegram-token
                  scope: GLOBAL
                  secret: ${TELEGRAM_TOKEN}
              - string:
                  id: github-webhook-secret
                  scope: GLOBAL
                  secret: ${GITHUB_WEBHOOK_SECRET}

    jobs:
      - script: >
          multibranchPipelineJob('example-multibranch') {
            branchSources {
              github {
                id('61887015')
                repoOwner('kirillank')
                repository('Diplom_DOS25')
                scanCredentialsId('github-credentials')
              }
              configure { node ->
                def traits = node / 'source' / 'traits'
                traits.appendNode('jenkins.scm.impl.trait.BranchDiscoveryTrait', '')
                traits.appendNode('org.jenkinsci.plugins.github__branch__source.OriginPullRequestDiscoveryTrait') {
                  strategyId '1'
                }
              }
            }
            factory {
              workflowBranchProjectFactory {
                scriptPath('Jenkinsfile')
              }
            }
          }

