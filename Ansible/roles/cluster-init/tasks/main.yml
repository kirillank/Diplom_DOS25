- name: Initialize Kubernetes cluster
  become: yes
  command: >
    kubeadm init
      --pod-network-cidr={{ cni_pod_network }}
  args:
    creates: "{{ kubeconfig_path }}"
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Copy kube‑config to control user
  become: yes
  block:
    - name: Ensure ~/.kube directory exists
      file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy admin.conf → ~/.kube/config
      copy:
        src: "{{ kubeconfig_path }}"
        dest: "/home/{{ ansible_user }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Wait for Kubernetes API server to be ready
  become: yes
  become_user: "{{ ansible_user }}"
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  shell: kubectl cluster-info
  register: cluster_info
  until: cluster_info.rc == 0
  retries: 30
  delay: 10
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Wait for all system pods to be ready
  become: yes
  become_user: "{{ ansible_user }}"
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  shell: kubectl get pods -n kube-system --field-selector=status.phase!=Running --no-headers | wc -l
  register: not_ready_pods
  until: not_ready_pods.stdout|int == 0
  retries: 30
  delay: 10
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Install Flannel CNI
  become: yes
  become_user: "{{ ansible_user }}"
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  shell: kubectl apply -f {{ flannel_url }}
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Wait for Flannel pods to be ready
  become: yes
  become_user: "{{ ansible_user }}"
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  shell: kubectl get pods -n kube-flannel --field-selector=status.phase!=Running --no-headers | wc -l
  register: flannel_not_ready
  until: flannel_not_ready.stdout|int == 0
  retries: 30
  delay: 10
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"
  ignore_errors: yes

- name: Remove control‑plane taint to allow system pods on master
  become: yes
  become_user: "{{ ansible_user }}"
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  shell: |
    kubectl taint nodes {{ groups['masters'][0] }} \
      node-role.kubernetes.io/control-plane:NoSchedule- --overwrite
  args:
    warn: false
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"
  register: taint_result
  changed_when: "'taint' in taint_result.stdout"

- name: Deploy Sealed Secrets controller
  become: yes
  become_user: "{{ ansible_user }}"
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  shell: kubectl apply -f {{ sealed_secrets_controller_url }}
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Wait for nodes to be ready
  become: yes
  become_user: "{{ ansible_user }}"
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  shell: kubectl get nodes --no-headers | grep -v Ready | wc -l
  register: not_ready_nodes
  until: not_ready_nodes.stdout|int == 0
  retries: 30
  delay: 10
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Get kubeadm join command
  become: yes
  become_user: "{{ ansible_user }}"
  environment:
    KUBECONFIG: "/home/{{ ansible_user }}/.kube/config"
  shell: kubeadm token create --print-join-command
  register: join_cmd
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Share join command with all hosts
  set_fact:
    join_command: "{{ join_cmd.stdout }}"
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"
