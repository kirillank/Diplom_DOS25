- name: Initialize Kubernetes cluster
  command: kubeadm init --pod-network-cidr={{ cni_pod_network }}
  args:
    creates: "{{ kubeconfig_path }}" 
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

 #- name: Set up kubeconfig for {{ ansible_facts.user_id }}
 #  become_user: "{{ ansible_facts.user_id }}"
 # shell: |
 #   mkdir -p $HOME/.kube
 #   sudo cp -i {{ kubeconfig_path }} $HOME/.kube/config
 #   sudo chown $(id -u):$(id -g) $HOME/.kube/config
 # run_once: true
 # delegate_to: "{{ groups['masters'][0] }}"

- name: Set up kubeconfig for user
  become: yes
  become_user: "{{ ansible_facts.user_id }}"
  block:
    - name: Ensure .kube directory exists
      file:
        path: "~/.kube"
        state: directory
        mode: '0755'
      
    - name: Copy kubeconfig
      copy:
        src: "{{ kubeconfig_path }}"
        dest: "~/.kube/config"
        remote_src: yes
        owner: "{{ ansible_facts.user_id }}"
        group: "{{ ansible_facts.user_id }}"
        mode: '0600'
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Install CNI
  become_user: "{{ ansible_facts.user_id }}"
  shell: |
    kubectl apply -f {{ flannel_url }} 
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Install Sealed Secrets controller
  become_user: "{{ ansible_facts.user_id }}"
  shell: |
    kubectl apply -f {{ sealed_secrets_controller_url }}
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Get join command
  shell: kubeadm token create --print-join-command
  register: join_cmd
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: Share join command to all hosts
  set_fact:
    join_command: "{{ join_cmd.stdout }}"
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"
